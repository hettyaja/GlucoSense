apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace 'com.anonymous.GlucoSense'
    defaultConfig {
        applicationId 'com.anonymous.GlucoSense'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    api 'com.facebook.react:react-native:+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:33.1.2')
    //implementation 'com.google.firebase:firebase-analytics'
    //implementation 'com.google.firebase:firebase-messaging'
    //implementation 'com.google.firebase:firebase-common'
    //implementation 'com.google.firebase:firebase-encoders'
    implementation 'com.google.firebase:firebase-iid:21.1.0'
    //implementation 'com.google.firebase:firebase-encoders-json'
    //implementation 'com.google.firebase:firebase-components'
    implementation 'com.google.firebase:firebase-ml-vision:24.0.3'
    implementation 'com.google.mlkit:text-recognition:16.0.1'
    

    // To recognize Chinese script
    implementation 'com.google.mlkit:text-recognition-chinese:16.0.1'

    // To recognize Devanagari script
    implementation 'com.google.mlkit:text-recognition-devanagari:16.0.1'

    // To recognize Japanese script
    implementation 'com.google.mlkit:text-recognition-japanese:16.0.1'

    // To recognize Korean script
    implementation 'com.google.mlkit:text-recognition-korean:16.0.1'
    implementation 'com.google.mlkit:playstore-dynamic-feature-support:16.0.0-beta2'
    implementation 'com.google.mlkit:vision-common:17.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition-chinese:16.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition-devanagari:16.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition-japanese:16.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition-korean:16.0.0'
    implementation 'com.google.android.gms:play-services-basement:17.6.0' 
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.android.gms:play-services-tasks:17.2.1'
    implementation 'com.google.android.gms:play-services-measurement-base:17.6.0'
    implementation 'com.google.android.gms:play-services-measurement-sdk-api:17.6.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:19.0.0'
    //implementation 'com.google.mlkit:vision-text-recognition:16.0.0' 
    
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-vision-common:19.1.3'
    implementation 'com.google.android.gms:play-services-vision-image-label:18.1.1'

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.google.firebase') {
            if (details.requested.name == 'firebase-bom') {
                details.useVersion '33.1.2'
            }else if (details.requested.name == 'firebase-ml-vision') {
                details.useVersion '24.0.3'
            }
            else if (details.requested.name == 'firebase-iid') {
                details.useVersion '21.1.0'
            }
            
        }
        else if (details.requested.group == 'com.google.mlkit') {
            if (details.requested.name == 'text-recognition') {
                details.useVersion '16.0.1'
            } else if (details.requested.name == 'text-recognition-chinese') {
                details.useVersion '16.0.1'
            } else if (details.requested.name == 'text-recognition-devanagari') {
                details.useVersion '16.0.1'
            } else if (details.requested.name == 'text-recognition-japanese') {
                details.useVersion '16.0.1'
            } else if (details.requested.name == 'text-recognition-korean') {
                details.useVersion '16.0.1'
            } else if (details.requested.name == 'playstore-dynamic-feature-support') {
                details.useVersion '16.0.0-beta2'
            } else if (details.requested.name == 'vision-common') {
                details.useVersion '17.0.0'
            }    
        }
        else if (details.requested.group == 'com.google.android.gms' && !details.requested.name.contains('multidex')) {
            if (details.requested.name == 'play-services-mlkit-text-recognition-chinese') {
                details.useVersion '16.0.0'
            } else if (details.requested.name == 'play-services-mlkit-text-recognition-devanagari') {
                details.useVersion '16.0.0'
            } else if (details.requested.name == 'play-services-mlkit-text-recognition-japanese') {
                details.useVersion '16.0.0'
            } else if (details.requested.name == 'play-services-mlkit-text-recognition-korean') {
                details.useVersion '16.0.0'
            } else if (details.requested.name == 'play-services-measurement-sdk-api'){
                details.useVersion '17.6.0'
            } else if (details.requested.name == 'play-services-basement'){
                details.useVersion '17.6.0'
            } else if (details.requested.name == 'play-services-base'){
                details.useVersion '17.6.0'
            }else if (details.requested.name == 'play-services-measurement-base'){
                details.useVersion '17.6.0'
            }else if (details.requested.name == 'play-services-tasks'){
                details.useVersion '17.2.1'
            
            }else if (details.requested.name == 'play-services-mlkit-text-recognition'){
                details.useVersion '19.0.0'
            
            }else if (details.requested.name == 'play-services-vision'){ // Added
                details.useVersion '20.1.3'
            }else if (details.requested.name == 'play-services-vision-common'){ // Added
                details.useVersion '19.1.3'
            }else if (details.requested.name == 'play-services-vision-image-label'){ // Added
                details.useVersion '18.1.1'
            } else {
                details.useVersion '17.0.0'
            }
        }
    }
}

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
